// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2024 15:00:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Full_Adder_Subtractor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Full_Adder_Subtractor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg M;
reg N;
reg O;
reg P;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire E;
wire F;
wire G;

// assign statements (if any)                          
Full_Adder_Subtractor i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.M(M),
	.N(N),
	.O(O),
	.P(P)
);
initial 
begin 
#1000000 $finish;
end 

// M
initial
begin
	M = 1'b0;
	M = #320000 1'b1;
	M = #320000 1'b0;
	M = #320000 1'b1;
end 

// N
initial
begin
	repeat(3)
	begin
		N = 1'b0;
		N = #160000 1'b1;
		# 160000;
	end
	N = 1'b0;
end 

// O
initial
begin
	repeat(6)
	begin
		O = 1'b0;
		O = #80000 1'b1;
		# 80000;
	end
	O = 1'b0;
end 

// P
initial
begin
	repeat(12)
	begin
		P = 1'b0;
		P = #40000 1'b1;
		# 40000;
	end
	P = 1'b0;
end 
endmodule

